FUNCTION_BLOCK "AI_Proc"
TITLE='模拟量进行线性转换、限值报警'
VERSION:'0.05'
KNOW_HOW_PROTECT
AUTHOR:Goosy
NAME:AI_Proc
FAMILY:GooLib

CONST
    S7_ZERO := 0;
    S7_SPAN := 27648;
    S7_AI_MIN := -32768;
    S7_AI_MAX := 32767;
END_CONST

VAR_INPUT 
    AI {S7_m_c := 'true'} : Int ;   // 模块采集值, 最好定义一个对应PIW通道的Int类型符号，以免除转换
    AI_zero {S7_m_c := 'true'} : INT := S7_ZERO;   // 模块零点值（4mA对应数值）0
    AI_span {S7_m_c := 'true'} : INT := S7_SPAN;   // 模块量程值（20mA对应数值）27648
    overflow_SP {S7_m_c := 'true'} : INT := 28000;   // 上溢出值
    underflow_SP {S7_m_c := 'true'} : INT := -500;   // 下溢出值
    zero {S7_m_c := 'true'} : REAL ;   // 量程低值
    span {S7_m_c := 'true'} : REAL := 100.0;   // 量程高值
    invalid_value {S7_m_c := 'true'} : REAL := -1000000.0;   // 无效输入时指定输出值
    AH {S7_m_c := 'true'} : REAL ;   // 高高报设定值
    WH {S7_m_c := 'true'} : REAL ;   // 高报设定值
    WL {S7_m_c := 'true'} : REAL ;   // 低报设定值
    AL {S7_m_c := 'true'} : REAL ;   // 低低报设定值
    dead_zone {S7_m_c := 'true'} : REAL := 0.5;   // 死区 （赋值0.0时无死区）
    FT_time {S7_m_c := 'true'} : TIME := T#0MS;   // 容错时间 (单位毫秒 赋值T#0MS时无容错时间)
END_VAR

VAR_OUTPUT 
    PV {S7_m_c := 'true'} : REAL ;   // 采集量工程单位数值
    AH_flag {S7_m_c := 'true'} : BOOL;   // 高高报标志
    WH_flag {S7_m_c := 'true'} : BOOL;   // 高报标志
    WL_flag {S7_m_c := 'true'} : BOOL;   // 低报标志
    AL_flag {S7_m_c := 'true'} : BOOL;   // 低低报标志
    invalid {S7_m_c := 'true'} : BOOL; // 数据无效，即 AI_error OR overflow OR underflow
    AI_error {S7_m_c := 'true'} : BOOL;   // 非测量输入，比如断线
    overflow {S7_m_c := 'true'} : BOOL;   // 高溢出
    underflow {S7_m_c := 'true'} : BOOL;   // 低溢出
    SP_error {S7_m_c := 'true'} : BOOL;   // 设置错误
END_VAR

VAR 
    trigger_alarm_high : BOOL;   // 触发高高报
    trigger_warn_high : BOOL;   // 触发高报
    trigger_warn_low : BOOL;   // 触发低报
    trigger_alarm_low : BOOL;   // 触发低低报
    alarm_high_set : TON;
    alarm_high_reset : TOF;
    warn_high_set : TON;
    warn_high_reset : TOF;
    warn_low_set : TON;
    warn_low_reset : TOF;
    alarm_low_set : TON;
    alarm_low_reset : TOF;
END_VAR

VAR_TEMP 
    value : REAL ;
    ERR : BOOL ;
    OVFL : BOOL ;
    UDFL : BOOL ;
END_VAR


BEGIN
//判断输入值的有效性
IF AI = S7_AI_MIN OR AI = S7_AI_MAX THEN
    // 非测量输入
    ERR := TRUE; // 输出
    OVFL := FALSE;
    UDFL := FALSE;
ELSIF AI > overflow_SP THEN
    // 高溢出
    ERR := FALSE; 
    OVFL := TRUE; // 输出
    UDFL := FALSE;
ELSIF AI < underflow_SP THEN
    // 低溢出
    ERR := FALSE; 
    UDFL := TRUE; // 输出
    OVFL:= FALSE;
ELSE
    //正常输入
    ERR := FALSE;
    OVFL := FALSE;
    UDFL := FALSE;
END_IF;

// 设置输出值
AI_error := ERR;
overflow := OVFL;
underflow := UDFL;
invalid := ERR OR OVFL OR UDFL;
IF invalid THEN
    AH_flag := FALSE;
    WH_flag := FALSE;
    WL_flag := FALSE;
    AL_flag := FALSE;
    PV := invalid_value;// 无效时不计算，直接赋值为 -1000000.0
    value := invalid_value;
ELSE
    value := (AI - AI_zero) * (span - zero) / (AI_span - AI_zero) + zero;
    PV := value;
END_IF;

//参数设置错误
SP_error := (WH > AH) OR (WL > WH) OR (AL > WL);

//报警触发
IF SP_error OR invalid THEN
    trigger_alarm_high := FALSE;
    trigger_warn_high := FALSE;
    trigger_warn_low := FALSE;
    trigger_alarm_low := FALSE;
ELSE
    //上上限报警
    IF value > AH THEN
        trigger_alarm_high := TRUE;
        trigger_warn_high := FALSE;
        trigger_alarm_low := FALSE;
        trigger_warn_low := FALSE;
    END_IF;
    //上上限报警恢复
    IF value < (AH - dead_zone) THEN
        trigger_alarm_high := FALSE;
    END_IF;
    
    //上限报警
    IF NOT trigger_alarm_high AND (value > WH) THEN
        trigger_warn_high := TRUE;
        trigger_alarm_low := FALSE;
        trigger_warn_low := FALSE;
    END_IF;
    //上限报警恢复
    IF value < (WH - dead_zone) THEN
        trigger_warn_high := FALSE;
    END_IF;
    
    //下下限报警
    IF (value < AL) THEN
        trigger_alarm_low := TRUE;
        trigger_warn_low := FALSE;
        trigger_warn_high := FALSE;
        trigger_alarm_high := FALSE;
    END_IF;
    //下下限报警恢复
    IF value > (AL + dead_zone) THEN
        trigger_alarm_low := FALSE;
    END_IF;
    
    //下限报警
    IF NOT trigger_alarm_low AND (value < WL) THEN
        trigger_warn_low := TRUE;
        trigger_warn_high := FALSE;
        trigger_alarm_high := FALSE;
    END_IF;
    //下限报警恢复
    IF value > (WL + dead_zone) THEN
        trigger_warn_low := FALSE;
    END_IF;
END_IF;

// 容错时限后输出报警标志
IF FT_time = T#0ms THEN
    AH_flag := trigger_alarm_high;
    WH_flag := trigger_warn_high;
    WL_flag := trigger_warn_low;
    AL_flag := trigger_alarm_low;
ELSE
    // 延时置位高高报
    alarm_high_set(
        IN := trigger_alarm_high,
        PT := FT_time);
    IF alarm_high_set.Q THEN
        AH_flag := TRUE;
    END_IF;

    // 延时复位高高报
    alarm_high_reset(
        IN := trigger_alarm_high,
        PT := FT_time);
    IF NOT alarm_high_reset.Q THEN
        AH_flag := FALSE;
    END_IF;
    
    // 延时置位高报
    warn_high_set(
        IN := trigger_warn_high,
        PT := FT_time);
    IF warn_high_set.Q THEN
        WH_flag := TRUE;
    END_IF;

    // 延时复位高报
    warn_high_reset(
        IN := trigger_warn_high,
        PT := FT_time);
    IF NOT warn_high_reset.Q THEN
        WH_flag := FALSE;
    END_IF;
    
    // 延时置位低报
    warn_low_set(
        IN := trigger_warn_low,
        PT := FT_time);
    IF warn_low_set.Q THEN
        WL_flag := TRUE;
    END_IF;

    // 延时复位低报
    warn_low_reset(
        IN := trigger_warn_low,
        PT := FT_time);
    IF NOT warn_low_reset.Q THEN
        WL_flag := FALSE;
    END_IF;

    // 延时置位低低报
    alarm_low_set(
        IN := trigger_alarm_low,
        PT := FT_time);
    IF alarm_low_set.Q THEN
        AL_flag := TRUE;
    END_IF;
    
    // 延时复位低低报
    alarm_low_reset(
        IN := trigger_alarm_low,
        PT := FT_time);
    IF NOT alarm_low_reset.Q THEN
        AL_flag := FALSE;
    END_IF;
    
END_IF;

END_FUNCTION_BLOCK
